# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: openconfig-telemetry.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "openconfig_telemetry.TelemetrySystem" do
    optional :sensor_groups, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups"
    optional :destination_groups, :message, 2, "openconfig_telemetry.TelemetrySystem.DestinationGroups"
    optional :subscriptions, :message, 3, "openconfig_telemetry.TelemetrySystem.Subscriptions"
    optional :global, :message, 4, "openconfig_telemetry.TelemetrySystem.Global"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups" do
    repeated :sensor_group, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup" do
    optional :sensor_group_id, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State"
    optional :sensor_paths, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths"
    optional :sensor_paths_self_define_event, :message, 5, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config" do
    optional :sensor_group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State" do
    optional :sensor_group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths" do
    repeated :sensor_path, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath" do
    optional :path, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State"
    optional :filters, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config" do
    optional :path, :string, 1
    optional :exclude_filter, :string, 2
    optional :reset_when_start, :bool, 3
    optional :depth, :uint32, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State" do
    optional :path, :string, 1
    optional :exclude_filter, :string, 2
    optional :reset_when_start, :bool, 3
    optional :depth, :uint32, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters" do
    repeated :filter, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter" do
    optional :name, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State"
    optional :conditions, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config" do
    optional :name, :string, 1
    optional :condition_relation, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config.ConditionRelation"
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config.ConditionRelation" do
    value :INVALID_ENUM_VALUE_ConditionRelation, 0
    value :ConditionRelation_AND, 1
    value :ConditionRelation_OR, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State" do
    optional :name, :string, 1
    optional :condition_relation, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State.ConditionRelation"
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State.ConditionRelation" do
    value :INVALID_ENUM_VALUE_ConditionRelation, 0
    value :ConditionRelation_AND, 1
    value :ConditionRelation_OR, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions" do
    repeated :condition, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.OpType"
    optional :op_value, :string, 3
    optional :config, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config"
    optional :state, :message, 5, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType"
    optional :op_value, :string, 3
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State.OpType"
    optional :op_value, :string, 3
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent" do
    repeated :sensor_path, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath" do
    optional :path, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.State"
    optional :filters, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Config" do
    optional :path, :string, 1
    optional :description, :string, 2
    optional :level, :uint32, 3
    optional :suppress_period, :uint32, 4
    optional :depth, :uint32, 5
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.State" do
    optional :path, :string, 1
    optional :description, :string, 2
    optional :level, :uint32, 3
    optional :suppress_period, :uint32, 4
    optional :depth, :uint32, 5
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters" do
    repeated :filter, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter" do
    optional :name, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State"
    optional :conditions, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config" do
    optional :name, :string, 1
    optional :condition_relation, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config.ConditionRelation"
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config.ConditionRelation" do
    value :INVALID_ENUM_VALUE_ConditionRelation, 0
    value :ConditionRelation_AND, 1
    value :ConditionRelation_OR, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State" do
    optional :name, :string, 1
    optional :condition_relation, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State.ConditionRelation"
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State.ConditionRelation" do
    value :INVALID_ENUM_VALUE_ConditionRelation, 0
    value :ConditionRelation_AND, 1
    value :ConditionRelation_OR, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions" do
    repeated :condition, :message, 1, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.OpType"
    optional :op_value, :string, 3
    optional :config, :message, 4, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config"
    optional :state, :message, 5, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType"
    optional :op_value, :string, 3
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State" do
    optional :op_field, :string, 1
    optional :op_type, :enum, 2, "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State.OpType"
    optional :op_value, :string, 3
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_enum "openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.OpType" do
    value :OpType_EQ, 0
    value :OpType_GT, 1
    value :OpType_GE, 2
    value :OpType_LT, 3
    value :OpType_LE, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups" do
    repeated :destination_group, :message, 1, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup" do
    optional :group_id, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State"
    optional :destinations, :message, 4, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations"
    optional :destinations_with_vpn, :message, 5, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config" do
    optional :group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State" do
    optional :group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations" do
    repeated :destination, :message, 1, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :config, :message, 3, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config"
    optional :state, :message, 4, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :protocol, :string, 3
    optional :tls, :bool, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :protocol, :string, 3
    optional :tls, :bool, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn" do
    repeated :destination_with_vpn, :message, 1, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :vpn_instance, :string, 3
    optional :config, :message, 4, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.Config"
    optional :state, :message, 5, "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.Config" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :vpn_instance, :string, 3
    optional :protocol, :string, 4
    optional :tls, :bool, 5
  end
  add_message "openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.State" do
    optional :destination_address, :string, 1
    optional :destination_port, :uint32, 2
    optional :vpn_instance, :string, 3
    optional :protocol, :string, 4
    optional :tls, :bool, 5
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions" do
    optional :persistent, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent"
    optional :dynamic, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent" do
    repeated :subscription, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription" do
    optional :subscription_name, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State"
    optional :sensor_profiles, :message, 4, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles"
    optional :destination_groups, :message, 5, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config" do
    optional :subscription_name, :string, 1
    optional :local_source_address, :string, 2
    optional :originated_qos_marking, :uint32, 3
    optional :protocol, :string, 4
    optional :encoding, :string, 5
    optional :local_source_port, :uint32, 6
    optional :tls, :bool, 7
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State" do
    optional :subscription_name, :string, 1
    optional :subscription_id, :uint64, 2
    optional :local_source_address, :string, 3
    optional :originated_qos_marking, :uint32, 4
    optional :protocol, :string, 5
    optional :encoding, :string, 6
    optional :local_source_port, :uint32, 7
    optional :tls, :bool, 8
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles" do
    repeated :sensor_profile, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile" do
    optional :sensor_group, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config" do
    optional :sensor_group, :string, 1
    optional :sample_interval, :uint64, 2
    optional :heartbeat_interval, :uint64, 3
    optional :suppress_redundant, :bool, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State" do
    optional :sensor_group, :string, 1
    optional :sample_interval, :uint64, 2
    optional :heartbeat_interval, :uint64, 3
    optional :suppress_redundant, :bool, 4
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups" do
    repeated :destination_group, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup" do
    optional :group_id, :string, 1
    optional :config, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config"
    optional :state, :message, 3, "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config" do
    optional :group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State" do
    optional :group_id, :string, 1
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic" do
    repeated :subscription, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription" do
    optional :subscription_id, :uint64, 1
    optional :state, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State"
    optional :sensor_paths, :message, 3, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State" do
    optional :subscription_id, :uint64, 1
    optional :destination_address, :string, 2
    optional :destination_port, :uint32, 3
    optional :sample_interval, :uint64, 4
    optional :heartbeat_interval, :uint64, 5
    optional :suppress_redundant, :bool, 6
    optional :originated_qos_marking, :uint32, 7
    optional :protocol, :string, 8
    optional :encoding, :string, 9
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths" do
    repeated :sensor_path, :message, 1, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath" do
    optional :path, :string, 1
    optional :state, :message, 2, "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State" do
    optional :path, :string, 1
    optional :exclude_filter, :string, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.Global" do
    optional :config, :message, 1, "openconfig_telemetry.TelemetrySystem.Global.Config"
    optional :state, :message, 2, "openconfig_telemetry.TelemetrySystem.Global.State"
  end
  add_message "openconfig_telemetry.TelemetrySystem.Global.Config" do
    optional :json_only_content, :bool, 1
    optional :cpu_max_usage, :uint32, 2
  end
  add_message "openconfig_telemetry.TelemetrySystem.Global.State" do
    optional :json_only_content, :bool, 1
    optional :cpu_max_usage, :uint32, 2
  end
end

module OpenconfigTelemetry
  TelemetrySystem = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem").msgclass
  TelemetrySystem::SensorGroups = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups").msgclass
  TelemetrySystem::SensorGroups::SensorGroup = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Config::ConditionRelation = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Config.ConditionRelation").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::State::ConditionRelation = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.State.ConditionRelation").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition::Config::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition::State::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.State.OpType").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPaths::SensorPath::Filters::Filter::Conditions::Condition::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Filters.Filter.Conditions.Condition.OpType").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Config::ConditionRelation = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Config.ConditionRelation").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::State::ConditionRelation = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.State.ConditionRelation").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition::Config::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.Config.OpType").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State").msgclass
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition::State::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.State.OpType").enummodule
  TelemetrySystem::SensorGroups::SensorGroup::SensorPathsSelfDefineEvent::SensorPath::Filters::Filter::Conditions::Condition::OpType = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPathsSelfDefineEvent.SensorPath.Filters.Filter.Conditions.Condition.OpType").enummodule
  TelemetrySystem::DestinationGroups = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::Destinations = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::Destinations::Destination = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::Destinations::Destination::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::Destinations::Destination::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::DestinationsWithVpn = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::DestinationsWithVpn::DestinationWithVpn = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::DestinationsWithVpn::DestinationWithVpn::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.Config").msgclass
  TelemetrySystem::DestinationGroups::DestinationGroup::DestinationsWithVpn::DestinationWithVpn::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.DestinationsWithVpn.DestinationWithVpn.State").msgclass
  TelemetrySystem::Subscriptions = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions").msgclass
  TelemetrySystem::Subscriptions::Persistent = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::SensorProfiles = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::SensorProfiles::SensorProfile = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::SensorProfiles::SensorProfile::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::SensorProfiles::SensorProfile::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::DestinationGroups = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::DestinationGroups::DestinationGroup = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::DestinationGroups::DestinationGroup::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config").msgclass
  TelemetrySystem::Subscriptions::Persistent::Subscription::DestinationGroups::DestinationGroup::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State").msgclass
  TelemetrySystem::Subscriptions::Dynamic = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic").msgclass
  TelemetrySystem::Subscriptions::Dynamic::Subscription = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription").msgclass
  TelemetrySystem::Subscriptions::Dynamic::Subscription::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State").msgclass
  TelemetrySystem::Subscriptions::Dynamic::Subscription::SensorPaths = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths").msgclass
  TelemetrySystem::Subscriptions::Dynamic::Subscription::SensorPaths::SensorPath = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath").msgclass
  TelemetrySystem::Subscriptions::Dynamic::Subscription::SensorPaths::SensorPath::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State").msgclass
  TelemetrySystem::Global = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Global").msgclass
  TelemetrySystem::Global::Config = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Global.Config").msgclass
  TelemetrySystem::Global::State = Google::Protobuf::DescriptorPool.generated_pool.lookup("openconfig_telemetry.TelemetrySystem.Global.State").msgclass
end
