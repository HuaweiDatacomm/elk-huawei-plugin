#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module Hwtelemetry
  # forward declarations
  class Telemetry < ::ProtocolBuffers::Message; end
  class TelemetryGPBTable < ::ProtocolBuffers::Message; end
  class Generator < ::ProtocolBuffers::Message; end
  class TelemetryRowGPB < ::ProtocolBuffers::Message; end
  class DataPath < ::ProtocolBuffers::Message; end
  class Path < ::ProtocolBuffers::Message; end
  class PathElem < ::ProtocolBuffers::Message; end
  class KeyEntry < ::ProtocolBuffers::Message; end
  class TelemetrySelfDefinedEvent < ::ProtocolBuffers::Message; end
  class TelemetrySelfDefineThresTable < ::ProtocolBuffers::Message; end
  class TelemetryThreshold < ::ProtocolBuffers::Message; end

  class Telemetry < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module Encoding
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "hwtelemetry.Telemetry.Encoding"

      Encoding_GPB = 0
      Encoding_JSON = 1
    end

    set_fully_qualified_name "hwtelemetry.Telemetry"

    optional :string, :node_id_str, 1
    optional :string, :subscription_id_str, 2
    optional :string, :sensor_path, 3
    optional :string, :proto_path, 13
    optional :uint64, :collection_id, 4
    optional :uint64, :collection_start_time, 5
    optional :uint64, :msg_timestamp, 6
    optional ::Hwtelemetry::TelemetryGPBTable, :data_gpb, 7
    optional :uint64, :collection_end_time, 8
    optional :uint32, :current_period, 9
    optional :string, :except_desc, 10
    optional :string, :product_name, 11
    optional ::Hwtelemetry::Telemetry::Encoding, :encoding, 12
    optional :string, :data_str, 14
    optional :string, :ne_id, 15
    optional :string, :software_version, 16
  end

  class TelemetryGPBTable < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.TelemetryGPBTable"

    repeated ::Hwtelemetry::TelemetryRowGPB, :row, 1
    repeated ::Hwtelemetry::DataPath, :delete, 2
    optional ::Hwtelemetry::Generator, :generator, 3
  end

  class Generator < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.Generator"

    optional :uint64, :generator_id, 1
    optional :uint32, :generator_sn, 2
    optional :bool, :generator_sync, 3
  end

  class TelemetryRowGPB < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.TelemetryRowGPB"

    optional :uint64, :timestamp, 1
    optional :bytes, :content, 11
  end

  class DataPath < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.DataPath"

    optional :uint64, :timestamp, 1
    optional ::Hwtelemetry::Path, :path, 2
  end

  class Path < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.Path"

    repeated ::Hwtelemetry::PathElem, :node, 1
  end

  class PathElem < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.PathElem"

    optional :string, :name, 1
    repeated ::Hwtelemetry::KeyEntry, :key, 2
  end

  class KeyEntry < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.KeyEntry"

    optional :string, :key, 1
    optional :string, :value, 2
  end

  class TelemetrySelfDefinedEvent < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module ThresholdRelation
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "hwtelemetry.TelemetrySelfDefinedEvent.ThresholdRelation"

      ThresholdRelation_INVALID = 0
      ThresholdRelation_AND = 1
      ThresholdRelation_OR = 2
    end

    set_fully_qualified_name "hwtelemetry.TelemetrySelfDefinedEvent"

    optional :string, :path, 1
    optional :string, :proto_path, 13
    optional :uint32, :level, 2
    optional :string, :description, 3
    optional :string, :fieldName, 4
    optional :uint32, :fieldValue, 5
    optional ::Hwtelemetry::TelemetrySelfDefineThresTable, :data_threshold, 6
    optional ::Hwtelemetry::TelemetrySelfDefinedEvent::ThresholdRelation, :thresholdRelation, 7
    optional :bytes, :content, 8
  end

  class TelemetrySelfDefineThresTable < ::ProtocolBuffers::Message
    set_fully_qualified_name "hwtelemetry.TelemetrySelfDefineThresTable"

    repeated ::Hwtelemetry::TelemetryThreshold, :row, 1
  end

  class TelemetryThreshold < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module ThresholdOpType
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "hwtelemetry.TelemetryThreshold.ThresholdOpType"

      ThresholdOpType_EQ = 0
      ThresholdOpType_GT = 1
      ThresholdOpType_GE = 2
      ThresholdOpType_LT = 3
      ThresholdOpType_LE = 4
    end

    set_fully_qualified_name "hwtelemetry.TelemetryThreshold"

    optional :uint32, :thresholdValue, 1
    optional ::Hwtelemetry::TelemetryThreshold::ThresholdOpType, :thresholdOpType, 2
  end

end
