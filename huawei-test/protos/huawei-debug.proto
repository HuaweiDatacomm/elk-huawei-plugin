syntax = "proto2";
// Automatically generated by ProtoYang
// compiled 2021-09-24 19:20:15
// ProtoYang-version 1
// module huawei-debug
// revision 2021-09-24
// revision 2020-05-29
// namespace urn:huawei:yang:huawei-debug

package huawei_debug;

message Debug {
   message CpuInfos {
      message CpuInfo {
         optional string position = 1;
         optional uint32 overload_threshold = 2;
         optional uint32 unoverload_threshold = 3;
         optional uint32 interval = 4;
         optional uint32 index = 5;
         optional uint32 system_cpu_usage = 6;
         optional uint32 monitor_number = 7;
         optional uint32 monitor_cycle = 8;
         optional string overload_state_change_time = 9;
         optional string current_overload_state = 10;
      }
      repeated CpuInfo cpu_info = 1;
   }
   optional CpuInfos cpu_infos = 1;
   message ServiceCpuInfos {
      message ServiceCpuInfo {
         optional string position = 1;
         optional string service_name = 2;
         optional uint32 service_cpu_usage = 3;
      }
      repeated ServiceCpuInfo service_cpu_info = 1;
   }
   optional ServiceCpuInfos service_cpu_infos = 2;
   message MemoryInfos {
      message MemoryInfo {
         optional string position = 1;
         optional uint32 overload_threshold = 2;
         optional uint32 unoverload_threshold = 3;
         optional uint32 index = 4;
         optional uint32 os_memory_total = 5;
         optional uint32 os_memory_use = 6;
         optional uint32 os_memory_free = 7;
         optional uint32 os_memory_usage = 8;
         optional uint32 do_memory_total = 9;
         optional uint32 do_memory_use = 10;
         optional uint32 do_memory_free = 11;
         optional uint32 do_memory_usage = 12;
         optional uint32 simple_memory_total = 13;
         optional uint32 simple_memory_use = 14;
         optional uint32 simple_memory_free = 15;
         optional uint32 simple_memory_usage = 16;
         optional string overload_state_change_time = 17;
         optional string current_overload_state = 18;
         optional uint32 memreli_notice_threshold = 19;
         optional uint32 memreli_overload_threshold = 20;
         optional uint32 memreli_exception_threshold = 21;
      }
      repeated MemoryInfo memory_info = 1;
   }
   optional MemoryInfos memory_infos = 3;
   message ResouceReliability {
      message MemoryReliability {
         optional bool enable = 1;
      }
      optional MemoryReliability memory_reliability = 1;
      message MemoryReliabilitySwitchoverThreshold {
         optional uint32 threshold = 1;
      }
      optional MemoryReliabilitySwitchoverThreshold memory_reliability_switchover_threshold = 2;
      message FlowControlMessageReliability {
         optional bool enable = 1;
      }
      optional FlowControlMessageReliability flow_control_message_reliability = 3;
   }
   optional ResouceReliability resouce_reliability = 4;
   message BoardResouceStates {
      message BoardResouceState {
         optional string position = 1;
         optional uint32 entity_index = 2;
         optional string board_name = 3;
         optional uint32 cpu_usage = 4;
         optional uint32 memory_total_size = 5;
         optional uint32 memory_used_size = 6;
         optional uint32 memory_usage = 7;
      }
      repeated BoardResouceState board_resouce_state = 1;
   }
   optional BoardResouceStates board_resouce_states = 5;
   message Disk {
      message Global {
         optional uint32 fault_detect_tolerance_time = 1;
      }
      optional Global global = 1;
   }
   optional Disk disk = 6;
}

